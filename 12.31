float zoom = 1;
float panX = 0;
float panY = 0;

float lastMouseX;
float lastMouseY;
boolean isDragging = false;

void setup() {
  size(800, 800);
  pixelDensity(1);
  colorMode(HSB, 1);
}

void draw() {
  loadPixels();
  
  for (int x = 0; x < width; x++) {
    for (int y = 0; y < height; y++) {
      float a = map(x, 0, width, -2.5, 2.5) / zoom + panX;
      float b = map(y, 0, height, -2.5, 2.5) / zoom + panY;
      
      if (a < -2.5 || a > 2.5 || b < -2.5 || b > 2.5) {
        continue;
      }
      
      float ca = a;
      float cb = b;
      
      int n = 0;
      int maxIterations = 100;
      
      while (n < maxIterations) {
        float aa = a * a - b * b;
        float bb = 2 * a * b;
        
        a = aa + ca;
        b = bb + cb;
        
        if (abs(a + b) > 16) {
          break;
        }
        
        n++;
      }
      
      float hue = map(n % 256, 0, 255, 0, 1);
      float saturation = map(n % 32, 0, 31, 0, 1);
      float brightness = n < maxIterations ? map(n, 0, maxIterations, 0, 1) : 0;
      
      int pix = x + y * width;
      pixels[pix] = color(hue, saturation, brightness);
    }
  }
  
  updatePixels();
}

void mouseWheel(MouseEvent event) {
  float e = event.getCount();
  float zoomFactor = pow(1.1, e);
  float mouseXNorm = (mouseX - width / 2.0) / width;
  float mouseYNorm = (mouseY - height / 2.0) / height;
  
  panX += mouseXNorm / zoom - mouseXNorm / (zoom * zoomFactor);
  panY += mouseYNorm / zoom - mouseYNorm / (zoom * zoomFactor);
  zoom *= zoomFactor;
  
  redraw();
}

void mousePressed() {
  lastMouseX = mouseX;
  lastMouseY = mouseY;
  isDragging = true;
}

void mouseReleased() {
  isDragging = false;
}

void mouseDragged() {
  if (isDragging) {
    float dx = (mouseX - lastMouseX) / width / zoom;
    float dy = (mouseY - lastMouseY) / height / zoom;
    panX -= dx;
    panY -= dy;
    lastMouseX = mouseX;
    lastMouseY = mouseY;
    
    redraw();
  }
}
